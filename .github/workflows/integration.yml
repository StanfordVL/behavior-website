name: Update Integration

on:
  schedule: # runs at 6am every day
    - cron: "0 6 * * *" 
  push: # runs on push to main
    branches: ["main"]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  update:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      # Fetch relavant data
      - name: Fetch object category mapping
        id: 'fetch_oc_mapping'
        uses: jroehl/gsheet.action@v1.0.0
        with:
          spreadsheetId: 10L8wjNDvr1XYMMHas4IYYP9ZK7TfQHu--Kzoi0qhAe4
          commands: |
            [
              { "command": "getData", "args": { "worksheetTitle": "Object Category Mapping" }}
            ]
        env:
          GSHEET_CLIENT_EMAIL: ${{ secrets.GSHEET_CLIENT_EMAIL }}
          GSHEET_PRIVATE_KEY: ${{ secrets.GCP_CREDENTIALS }}
      - name: dump results
        env:
          RESULTS: ${{ steps.fetch_oc_mapping.outputs.results }}
        # ref: https://stackoverflow.com/questions/32960857/how-to-convert-arbitrary-simple-json-to-csv-using-jq
        run: echo "$RESULTS" | jq -r '(map(keys) | add | unique) as $cols | map(. as $row | $cols | map($row[.])) as $rows | $cols, $rows[] | @csv' > category_mapping.csv
      - name: Clone B100 BDDL Repo
        uses: actions/checkout@v3
        with:
          repository: StanfordVL/bddl
          path: ./bddl 
      - name: Clone B1K BDDL Repo
        uses: actions/checkout@v3
        with:
          repository: sanjanasrivastava/ObjectPropertyAnnotation
          path: ./ObjectPropertyAnnotation
          token: ${{ secrets.REPO_TOKEN }}

      # pull ig pipeline data
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          architecture: x64
      - name: Clone ig pipeline Repo
        uses: actions/checkout@v3
        with:
          repository: StanfordVL/ig_pipeline
          path: ./ig_pipeline
          token: ${{ secrets.REPO_TOKEN }}
      - name: Install dvc
        run: pip install dvc[gs]
      - name: Authenticate on Google Cloud
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      - name: Pull dvc data
        run: dvc pull [combined_room_object_list, object_inventory]

      # Build static content
      - name: Checkout integration repo
        uses: actions/checkout@v3
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Build integration
        run: python server.py
      
      # Deploy to github pages
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: './build'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

